#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

struct Aabb
{
  vec3 minimum;
  vec3 maximum;
};

struct Ray
{
  vec3 origin;
  vec3 direction;
};

struct Instance {
  vec3 position;
  vec3 scale;
  vec3 rotation;
  uint matId;
};

layout(set = 0, binding = 3) buffer InstanceBuffer { Instance instances[]; };

float hitAabb(const Aabb aabb, const Ray r){
  vec3  invDir = 1.0 / r.direction;
  vec3  tbot   = invDir * (aabb.minimum - r.origin);
  vec3  ttop   = invDir * (aabb.maximum - r.origin);
  vec3  tmin   = min(ttop, tbot);
  vec3  tmax   = max(ttop, tbot);
  float t0     = max(tmin.x, max(tmin.y, tmin.z));
  float t1     = min(tmax.x, min(tmax.y, tmax.z));
  return t1 > max(t0, 0.0) ? t0 : -1.0;
}

void main(){
  Instance instance = instances[gl_InstanceID];
  Ray ray;
  ray.origin    = gl_WorldRayOriginEXT;
  ray.direction = gl_WorldRayDirectionEXT;
  
  float tHit    = -1;
  Aabb aabb;
  aabb.minimum = instance.position - instance.scale*0.5;
  aabb.maximum = instance.position + instance.scale*0.5;
  tHit         = hitAabb(aabb, ray);

  // Report hit point
  if(tHit > 0)
    reportIntersectionEXT(tHit, 0);
}
